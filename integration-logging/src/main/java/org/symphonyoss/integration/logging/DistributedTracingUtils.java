/**
 * Copyright 2016-2017 Symphony Integrations - Symphony LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.symphonyoss.integration.logging;

import static org.apache.commons.lang3.StringUtils.substringAfter;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.MDC;

/**
 * Responsible to set a MDC id for the X-Trace-Id key. The X-Trace-Id key is used for tracking logs of a given activity
 * across multiple modules and threads.
 *
 * Created by Milton Quilzini on 28/11/16.
 */
public class DistributedTracingUtils {
  /**
   * Set an unique ID on the current thread using {@link org.slf4j.MDC} under this constant as an
   * identifier to keep track of a given activity.<br/>
   * The logs generated by log4j will include X-Trace-Id's for the current and parent threads in the following
   * format:<br/>
   * <br/>
   * parent thread 1 id:parent thread 2 id:current thread id<br/>
   * <br/>
   * A maximum of 3 X-Trace-Id's are concatenated and separated by ":", where each thread id is a random 6-char string.
   */
  public static final String TRACE_ID = "X-Trace-Id";

  /**
   * The size of trace ID being set on MDC, for a random, alphanumeric string.
   */
  public static final int TRACE_ID_SIZE = 6;

  /**
   * Separates a base trace ID to the newly generated one, when there's a need for that.
   */
  public static final String TRACE_ID_SEPARATOR = ":";

  /**
   * The max number of trace ID's to concatenate.
   */
  public static final int MAX_TRACE_IDS_TO_CONCATENATE = 3;

  /**
   * The number of separators.
   */
  public static final int MAX_SEPARATORS_SIZE = MAX_TRACE_IDS_TO_CONCATENATE - 1 ;

  /**
   * The max size of trace ID when using a base trace ID.
   */
  public static final int MAX_TRACE_ID_SIZE = TRACE_ID_SIZE * MAX_TRACE_IDS_TO_CONCATENATE + MAX_SEPARATORS_SIZE;

  /**
   * Sets a 6 digit random, alphanumeric string on MDC.
   */
  public static void setMDC() {
    MDC.put(TRACE_ID, RandomStringUtils.randomAlphanumeric(TRACE_ID_SIZE));
  }

  /**
   * Appends a 6 digit random, alphanumeric string to the informed trace ID and sets it on MDC.
   * @param baseTraceId to compose the new MDC trace ID.
   */
  public static void setMDC(String baseTraceId) {
    if (StringUtils.isBlank(baseTraceId)) {
      setMDC();
    } else {
      if (baseTraceId.length() >= MAX_TRACE_ID_SIZE) {
        baseTraceId = StringUtils.substringAfter(baseTraceId, TRACE_ID_SEPARATOR);
      }
      MDC.put(TRACE_ID, baseTraceId + TRACE_ID_SEPARATOR + RandomStringUtils.randomAlphanumeric(TRACE_ID_SIZE));
    }
  }

  /**
   * Clears the MDC for the current thread.
   */
  public static void clearMDC() {
    MDC.put(TRACE_ID, null);
  }

  /**
   * Gets the MDC for the current thread.
   */
  public static String getMDC() {
    return MDC.get(TRACE_ID);
  }
}
